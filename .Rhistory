getwd()
quit()
find.package("devtools")
install.packages("devtools")
library(devtools)
q()
find.package("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library("KernSmooth")
get()
getwd()
x<-list(a=1:5, b=rnorm(10))
lapply(x,mean)
library(datasets)
data(iris)
?iris
iris
?apply
?mean
str(iris)
iris$Species=="virginica"
?subset
i_sub<-subset(iris, iris$Species=="virginica")
i_sub
apply(i_sub, 2, mean)
str(i_sub)
?tapply
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
i_subset
i_sub
mean(i_sub$Sepal.Length)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[iris$Sepal.Length, 1:4], 1, mean)
apply(iris[iris$Sepal.Length, 1:4], 2, mean)
iris[iris$Sepal.Length,]
iris
iris[,1]
iris[,1:4]
iris[,1:4,iris$Sepal.Length==6]
iris[,1:4,iris$Sepal.Length=="6]
iris[,1:4,iris$Sepal.Length=="6"]
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
?with
tapply(mtcars$cyl, mtcars$mpg, mean)
head(mtcars)
str(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
abs(26.66364-15.1)
debug(ls)
ls
tapply(mtcars$cyl, mtcars$mpg, mean)
s<-split(mtcars, mtcars$cyl)
enddbug()
q()
Q
Q
s<-split(mtcars, mtcars$cyl)
q()
q()
q
f
f
undebug(ls)
s<-split(mtcars, mtcars$cyl)
s
lapply(split(mtcars, mtcars$cyl), mean)
ls()
mean(x)
trace()
traceback()
mean(x)
traceback()
1
x
mean(b)
traceback()
debug(ls)
ls()
q()
Q
undebug(ls)
ls()
q9
with(mtcars, tapply(mpg, cyl, mean))
15.1-26.66364
sapply(split(mtcars$mpg, mtcars$cyl), mean)
str(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(209.21429-82.63636)
q()
q()
makeCacheMatrix <- function(x = matrix()) {
# a new m variable is set as Null
m <- NULL
#when the set function is executed the y variable is stored in x and m becomes null
set <- function(y) {
x <<- y
m <<- NULL
}
#get function returns the x matrix
get <- function() {
x
}
#setmatrix function sets the matrix variable in to the global m variable
setmatrix <- function(matrix) {
m <<- matrix
}
#getmatrix returns the m variable
getmatrix <- function() {
m
}
#store the methods in a list so that they can be accessed using $
list(set = set,
get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#gets the cached inverse matrix if it exists, assigns it to m, and returns that m if it exists
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
#else do the below functions to (1) calcuate the inverse matrix, (2) place it into the cache, and (3) display it
data <- x$get()
#(1) Calcuate the inverse matrix
m <- solve(data, ...)
#(2) place it into the cache
x$setmatrix(m)
#(3) Display it
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
m
x <- makeCacheMatrix(m)
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
m <- c(-1, -2, 1, 1)
m
class(m)
x <- makeVector(m)
x
class(x)
x$get()
inv <- cachemean(x)
inv
inv <- cachemean(x)
inv
getwd()
setwd("C:/Users/dkwan/Documents/R Coursera")
ls
setwd("C:/Users/dkwan/Documents/R Coursera/ProgrammingAssignment2")
source("cachematrix.R")
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
m
source("cachematrix.R")
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
x
m
